(let
  (nonrec)
  (termbind
    (strict)
    (vardecl addInteger (fun (con integer) (fun (con integer) (con integer))))
    (builtin addInteger)
  )
  (termbind
    (strict)
    (vardecl addInteger (fun (con integer) (fun (con integer) (con integer))))
    (lam x (con integer) (lam y (con integer) [ [ addInteger x ] y ]))
  )
  (termbind
    (strict)
    (vardecl f (fun (con integer) (con integer)))
    (lam y (con integer) [ [ addInteger y ] (con integer 3) ])
  )
  (termbind
    (nonstrict)
    (vardecl x (con integer))
    [ [ addInteger (con integer 1) ] (con integer 2) ]
  )
  [ [ addInteger [ f x ] ] [ f x ] ]
)
-- Both the function and the argument of the application mention `x`,
-- so `x` cannot be floated in.
