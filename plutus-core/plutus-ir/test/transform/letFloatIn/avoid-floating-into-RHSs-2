(let
  (nonrec)
  (termbind
    (strict)
    (vardecl addInteger (fun (con integer) (fun (con integer) (con integer))))
    (builtin addInteger)
  )
  (termbind
    (strict)
    (vardecl addInteger (fun (con integer) (fun (con integer) (con integer))))
    (lam x (con integer) (lam y (con integer) [ [ addInteger x ] y ]))
  )
  (termbind
    (nonstrict)
    (vardecl x (con integer))
    [ [ addInteger (con integer 1) ] (con integer 2) ]
  )
  (termbind
    (strict)
    (vardecl f (fun (con integer) (con integer)))
    (lam y (con integer) [ [ addInteger y ] x ])
  )
  [ [ addInteger [ f (con integer 1) ] ] [ f (con integer 2) ] ]
)
-- Similar to -1, except the RHS (of `f`) is a lambda abstraction.
