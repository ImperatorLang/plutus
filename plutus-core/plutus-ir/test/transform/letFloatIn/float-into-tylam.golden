(let
  (nonrec)
  (datatypebind
    (datatype
      (tyvardecl Bool (type))

      Bool_match
      (vardecl True Bool) (vardecl False Bool)
    )
  )
  (datatypebind
    (datatype
      (tyvardecl Tuple2 (fun (type) (fun (type) (type))))
      (tyvardecl a (type)) (tyvardecl b (type))
      Tuple2_match
      (vardecl Tuple2 (fun a (fun b [ [ Tuple2 a ] b ])))
    )
  )
  (abs
    a
    (type)
    (lam
      a
      a
      [
        [ { { Tuple2 a } (con integer) } a ]
        (let
          (nonrec)
          (termbind
            (strict)
            (vardecl
              addInteger (fun (con integer) (fun (con integer) (con integer)))
            )
            (lam
              x
              (con integer)
              (lam y (con integer) [ [ (builtin addInteger) x ] y ])
            )
          )
          (termbind
            (nonstrict)
            (vardecl y (con integer))
            [ [ addInteger (con integer 1) ] (con integer 2) ]
          )
          [ [ addInteger y ] y ]
        )
      ]
    )
  )
)